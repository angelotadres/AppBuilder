using UnityEngine;
using UnityEditor;
using System.Collections.Generic;

namespace AppBuilder {
    public class Builder {
         
        private static string buildFolderPath = Application.dataPath + "/../Build";
        private static string batchPath = Application.dataPath + "/Tools/AppBuilder/Bash";
        private static string appBladeKey = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa";

        public static void Build (BuildTarget target, string buildName) {
            BuildSettings.UpdateSettings ();
            GenerateBuildInfo ();
            string[] scenes = GetEnabledScenes ();
            string buildFullPath;
            
            buildFullPath = buildFolderPath + "/" + target + "/" + buildName;
            BuildPipeline.BuildPlayer (scenes, buildFullPath, target, BuildOptions.None);
            
            // Distribution
            if (target == BuildTarget.Android) {
                PublishOnAppblade (buildFullPath);
            }
        }
        
        public static void CreateBuildFolder () {
            if (System.IO.Directory.Exists (buildFolderPath)) {
                System.IO.Directory.Delete (buildFolderPath, true);
            }
            System.IO.Directory.CreateDirectory (buildFolderPath);
        }

        private static string ExecuteCommand (string command, string arguments = "") {
            System.Diagnostics.Process pProcess = new   
                System.Diagnostics.Process ();
            pProcess.StartInfo.FileName = command;
            pProcess.StartInfo.Arguments = arguments;
            pProcess.StartInfo.UseShellExecute = false;
            pProcess.StartInfo.RedirectStandardOutput = true;
            pProcess.Start ();
            string strOutput = pProcess.StandardOutput.ReadToEnd ();
            pProcess.WaitForExit ();
            return strOutput;
        }

        private static string[] GetEnabledScenes () {
            List<string> scenes = new List<string> ();
            foreach (EditorBuildSettingsScene s in EditorBuildSettings.scenes) {
                if (s.enabled) {
                    scenes.Add (s.path);
                }
            }
            return scenes.ToArray ();
        }
        
        private static string GitHash () {
            string command = batchPath + "/mac-githash.sh";
            string output = ExecuteCommand (command);
            // We trim the output to remove new lines at the end.
            return output.Trim ();
        }

        private static void GenerateBuildInfo () {
            string content = "";
            string hash = GitHash ();

            Debug.Log ("Githash " + hash);

            string date = System.DateTime.Now.ToString ();
            ;
            content += "namespace AppBuilder {\n";
            content += "\tpublic class BuildInfo {\n";
            content += string.Format (
                "\t\tpublic const string Hash = \"{0}\";\n", hash);
            content += string.Format (
                "\t\tpublic const string Date = \"{0}\";\n", date);
            content += "\t}";
            content += "}";

            Debug.Log (content);

            string buildInfoPath = Application.dataPath + "/Tools/AppBuilder/Scripts/BuildInfo.Autogenerated.cs";
            System.IO.File.WriteAllText (buildInfoPath, content);
        }
        
        private static string PublishOnAppblade (string build) {
            string command = batchPath + "/mac-appblade.sh";
            string arguments = string.Format (
                "{0} {1}", appBladeKey, build);
            string output = ExecuteCommand (command, arguments);
            return output.Trim ();
        }
    }
}
